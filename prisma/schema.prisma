// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  reviews       Review[]
}

enum UserRole {
  USER
  ADMIN
}

model Product {
  id           String         @id @default(cuid())
  title        String
  slug         String         @unique
  description  String
  price        Float          // Changed from Decimal to Float for SQLite compatibility
  images       String         // Changed from String[] to String for SQLite compatibility
  inStock      Boolean        @default(true)
  platform     String?
  platformIcon String?
  rewardPoints Int            @default(0)
  category     ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  reviews      Review[]
  orderItems   OrderItem[]
  faq          FAQ[]
}

model ProductCategory {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  items        OrderItem[]
  total        Float       // Changed from Decimal to Float for SQLite compatibility
  status       OrderStatus @default(PENDING)
  paymentId    String?
  paymentMethod String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float   // Changed from Decimal to Float for SQLite compatibility
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  key       String?
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
